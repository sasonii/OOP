Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'coef' stamp: 'a 4/8/2023 15:23'!coef	^coef.! !!Monom methodsFor: 'coef' stamp: 'a 4/8/2023 17:26'!coef: anInteger	(anInteger isKindOf: Integer) ifTrue: [coef := anInteger.]  ifFalse: [self error: 'invalid input']! !!Monom methodsFor: 'derivative' stamp: 'a 4/8/2023 15:23'!derivative |new_monom|	new_monom := Monom new.	(self exp > 0) ifTrue: [		new_monom exp: (self exp - 1).		new_monom coef: ((self coef) *( self exp)).		] ifFalse: [		new_monom exp: 0.		new_monom coef: 0.		].	^new_monom! !!Monom methodsFor: 'initialize-release' stamp: 'a 4/4/2023 13:23'!initialize	exp :=0.	coef :=0.	! !!Monom methodsFor: 'exp' stamp: 'a 4/8/2023 15:23'!exp	^exp.! !!Monom methodsFor: 'exp' stamp: 'a 4/8/2023 15:23'!exp: anInteger	((anInteger isKindOf: Integer) & (anInteger >= 0)) ifTrue: [exp := anInteger.]  ifFalse: [self error: 'invalid input']! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'asDictionary' stamp: 'a 4/8/2023 16:05'!asDictionary |dictionary|	dictionary := Dictionary new.	monoms do: [:m | dictionary add: (Association key: (m exp) value: (m coef))].	^dictionary.	! !!Polynom methodsFor: 'derivative' stamp: 'a 4/8/2023 16:14'!derivative |new_polynom temp_monom|	new_polynom := Polynom new.	monoms do: [:m | 		temp_monom := (m derivative).		((temp_monom coef) = 0) ifFalse: [new_polynom addMonom: temp_monom].		].	^new_polynom.	! !!Polynom methodsFor: 'eval' stamp: 'a 4/8/2023 16:46'!eval: anInteger	(anInteger isKindOf: Integer) ifTrue: [		^monoms inject: 0 into: [:x :m | x + ((anInteger raisedTo: (m exp)) * (m coef)) ].	]	ifFalse: [self error: 'invalid input']! !!Polynom methodsFor: 'add' stamp: 'a 4/8/2023 17:15'!add: aPolynom | temp_polynom|	temp_polynom := Polynom new.	temp_polynom := aPolynom veryDeepCopy.	(aPolynom isKindOf: Polynom) ifTrue: [		monoms do: [:m | temp_polynom addMonom: m].		^temp_polynom.		]	ifFalse: [ self error: 'invalid input'].! !!Polynom methodsFor: 'multiplyByMonom' stamp: 'a 4/8/2023 16:00'!multiplyByMonom: aMonom	(aMonom isKindOf: Monom) ifTrue: [		((aMonom coef) = 0) ifTrue: [monoms := LinkedList new]		ifFalse:[				monoms := monoms collect: [:m | m exp: ((m exp) + (aMonom exp)). m coef: ((m coef) * (aMonom coef))]			]		]	ifFalse: [self error: 'invalid input'].! !!Polynom methodsFor: 'initialize-release' stamp: 'a 4/8/2023 14:52'!initialize	monoms :=  LinkedList new.! !!Polynom methodsFor: 'addMonom' stamp: 'a 4/8/2023 15:49'!addMonom: aMonom |flag|	flag := 0.	(aMonom isKindOf: Monom) ifTrue: [		monoms do: [:m| 			((m exp) = (aMonom exp)) ifTrue: [				m coef: (m coef) + (aMonom coef). 				((m coef) = 0) ifTrue: [monoms remove: m].				flag := 1.				].			].		((flag = 0) & (aMonom coef ~= 0)) ifTrue: [monoms add: (aMonom deepCopy)].		]			ifFalse: [self error: 'invalid input'.]! !