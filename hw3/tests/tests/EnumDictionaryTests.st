'From Squeak5.3 of 6 April 2022 [latest update: #19475] on 29 May 2022 at 5:25:24 pm'!TestCase subclass: #EnumDictionaryTests4	instanceVariableNames: 'dict1 dict2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3SampleTests'!!EnumDictionaryTests4 methodsFor: 'as yet unclassified' stamp: 'SB 5/29/2022 17:20'!setUp	| error |	"set up the test - create and initialize the instances of EnumDictionary, and create the Enum class"		(Smalltalk hasClassNamed: #OOPColor) ifTrue: [ Smalltalk removeClassNamed: #OOPColor. ].		OOPEnum subclass: #OOPColor 		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: true 		initialize: ('initialize', (String cr), '	^self')		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.			(Smalltalk hasClassNamed: #OOPColor2) ifTrue: [ Smalltalk removeClassNamed: #OOPColor2. ].		OOPEnum subclass: #OOPColor2 		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: true 		initialize: ('initialize', (String cr), '	^self')		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.		dict1 := EnumDictionary new.	self assert: dict1 getEnum isNil.		error := [dict1 setEnum: Class] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'Class is not an Enum').	self assert: dict1 getEnum isNil.		error := [dict1 setEnum: OOPEnum] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'OOPEnum is not an Enum').	self assert: dict1 getEnum isNil.		error := [dict1 setEnum: OOPColor_GREEN__] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'OOPColor_GREEN__ is not an Enum').	self assert: dict1 getEnum isNil.		dict1 setEnum: OOPColor.	self assert: dict1 getEnum = OOPColor.		error := [dict1 setEnum: OOPColor2] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'the Dictionary''s Enum is already defined with OOPColor').	self assert: dict1 getEnum = OOPColor.		error := [EnumDictionary onEnum: OOPEnum] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'OOPEnum is not an Enum').	error := [EnumDictionary onEnum: Class] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'Class is not an Enum').	dict2 := EnumDictionary onEnum: OOPColor.	self assert: dict2 getEnum = OOPColor.	error := [dict2 setEnum: OOPColor2] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'the Dictionary''s Enum is already defined with OOPColor').	self assert: dict2 getEnum = OOPColor.! !!EnumDictionaryTests4 methodsFor: 'as yet unclassified' stamp: 'SB 5/29/2022 17:25'!testAdd	"use add: method"	| red purple error |		error := [dict1 add: 'S'->'h'] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'this EnumDictionary only accepts OOPColor''s values as keys').		error := [dict1 add: 0->'n'] on: Error do: [:ex | ex return: ex messageText].	self assert: (error = 'this EnumDictionary only accepts OOPColor''s values as keys').		red := OOPColor RED.	purple := OOPColor GREEN.		dict1 add: red->'red'.	dict1 add: purple->'green'.	self assert: (dict1 at: red) = 'red'.	self assert: (dict1 at: OOPColor GREEN) = 'green'.	dict2 add: red->1.	dict2 add: purple->42.	self assert: (dict2 at: red) = 1.	self assert: (dict2 at: OOPColor GREEN) = 42.! !!EnumDictionaryTests4 methodsFor: 'as yet unclassified' stamp: 'MG 6/1/2020 17:25'!testGetEnum	"check getEnum method"	| enum1 enum2 |	enum1 := dict1 getEnum.	enum2 := dict2 getEnum.		self assert: ( enum1 = OOPColor).	self assert: ( enum2 = OOPColor).! !