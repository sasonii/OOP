Dictionary subclass: #EnumDictionary	instanceVariableNames: 'enumClass'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!!EnumDictionary methodsFor: 'getEnum' stamp: 'ET 5/29/2023 15:54'!getEnum	^enumClass.! !!EnumDictionary methodsFor: 'initialize-release' stamp: 'new 5/30/2023 16:48'!initialize 	enumClass := nil.	^self! !!EnumDictionary methodsFor: 'add' stamp: 'new 5/30/2023 17:21'!add: anAssociation | associationKey associationValue |		associationValue := anAssociation value.		associationKey := anAssociation key.		(associationKey class isKindOf: enumClass class)		ifTrue: [ self at: associationKey put: associationValue.]		ifFalse: [ AssertionFailure signal: ('this EnumDictionary only accepts ', enumClass name, '''s values as keys').].! !!EnumDictionary methodsFor: 'setEnum' stamp: 'new 5/30/2023 17:31'!setEnum: anEnumClass	(anEnumClass superclass = OOPEnum)	ifTrue: [		(anEnumClass isMemberOf: OOPEnum class)	ifTrue: [AssertionFailure signal: (anEnumClass name,' is not an Enum').].		(enumClass == nil)		ifTrue: [ enumClass := anEnumClass.]		ifFalse: [AssertionFailure signal: ('the Dictionary''s Enum is already defined with ', enumClass name).]		]	ifFalse:[	AssertionFailure signal: (anEnumClass name,' is not an Enum').]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnumDictionary class	instanceVariableNames: ''!!EnumDictionary class methodsFor: 'onEnum' stamp: 'new 5/30/2023 17:31'!onEnum: anEnumClass | retDictionary |	(anEnumClass isKindOf: OOPEnum class)	ifTrue: [		retDictionary := EnumDictionary new.		retDictionary initialize.		retDictionary setEnum: anEnumClass.		]	ifFalse: [AssertionFailure signal: (anEnumClass name, ' is not an Enum').].	^retDictionary! !Object subclass: #OOPEnum	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPEnum class	instanceVariableNames: 'values lazyInitialization'!!OOPEnum class methodsFor: 'new' stamp: 'ET 5/29/2023 15:48'!new	AssertionFailure signal: 'You can''t create an instance of ', self name.! !!OOPEnum class methodsFor: 'subclass' stamp: 'ET 5/29/2023 15:50'!subclass: aSubclassName instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategory	AssertionFailure signal: 'You must specify ', aSubclassName, '''s values'! !!OOPEnum class methodsFor: 'subclass' stamp: 'new 5/30/2023 18:57'!subclass: aSubclassName values: valuesArr lazyInitialization: aBoolean initialize: initializeAsString instanceVariableNames: instVarNamesclassVariableNames: classVarNames poolDictionaries: poolDictionariescategory: aCategoryName|newClass enum counter vars|	(self isMemberOf: OOPEnum class)	ifTrue: [		newClass := (ClassBuilder new).		enum := newClass superclass: OOPEnum 			subclass: (aSubclassName asSymbol) 					    instanceVariableNames: instVarNames			                classVariableNames: classVarNames			                poolDictionaries: poolDictionaries			                category: aCategoryName.						enum values: valuesArr.			lazyInitialization := aBoolean.			(enum) compile: initializeAsString notifying: nil.			enum initialize.			vars := ' '.			counter := 0.			valuesArr do: [:x | (counter == ((valuesArr size)-1)) 				ifTrue:[	vars := (vars, x)]				ifFalse:[vars := (vars, x, ' ').].				counter := counter+1.				].			(enum class) instanceVariableNames: vars.					valuesArr do:[:ann_Valuename | |ann_enum body ann_name|			ann_name := aSubclassName, '_', ann_Valuename,'__'.			ann_enum := newClass superclass: enum					    subclass: ((ann_name) asSymbol)			                instanceVariableNames: ''			                classVariableNames: ''			                poolDictionaries: ''			                category: aCategoryName.			ann_enum compile:('methods',String cr,'     ^(',aSubclassName,' methods)') notifying:nil.			ann_enum class compile:('methodDictionary',String cr,'     ^(',aSubclassName,' methodDictionary)') notifying:nil.			(aBoolean) 			ifTrue:[				body := ('  (', ann_Valuename, ' = nil) ifTrue: [', ann_Valuename,' := (',ann_name,' basicNew initialize)]. ^', ann_Valuename).				(enum class) compile: (ann_Valuename, ' ', body) notifying: nil.			]			ifFalse:[ 					body := ('^',ann_Valuename ).					(enum class) compile: (ann_Valuename, ' ', body) notifying: nil.					(enum class) compile: 'init_helper ', ann_Valuename,' := (', ann_name,' basicNew initialize)'.					enum init_helper.				]			].				^enum		]		ifFalse: [AssertionFailure signal: (self name), ' is final!! It can''t be inherited']! !!OOPEnum class methodsFor: 'compile' stamp: 'new 5/30/2023 19:03'!compile: aSourceCode | methodName tmp_arr tmp_val name |	tmp_val := aSourceCode copyFrom: 1 to: ((aSourceCode indexOf:(String cr) asCharacter ifAbsent:[aSourceCode indexOf: ' '])).	tmp_arr := tmp_val splitBy:' '.	methodName := ''.			tmp_arr do:[:x| |k i|		i := x indexOf:(':' asCharacter) ifAbsent:[-1].		((i ~= -1) and:[i ~= 1]) ifTrue:[k := x copyFrom:1 to: i.			methodName := (methodName, k deepCopy).		]	].	(methodName == '') ifTrue:[		methodName := tmp_arr at:1.	].	name := ''.	methodName do:[:ch|		((ch isLetter) or:(ch isDigit) or:[ch == (':' asCharacter)]) ifTrue:[				name := (name,ch asString).		]	].	methodName := name.	(self isKindOf:OOPEnum class) ifTrue:[		(self isMemberOf:OOPEnum class) ifTrue:[			AssertionFailure signal: (methodName, ' does not override a method from ', (super class name)). 		] ifFalse:[			(self values = nil) ifTrue:[ 				((self methodDictionary) keys includes: (methodName asSymbol)) ifTrue:[					self compile:aSourceCode notifying:nil.				] ifFalse:[AssertionFailure signal: (methodName, ' does not override a method from ', (super class name)).].			] ifFalse:[				self compile: aSourceCode notifying:nil.				self values do:[:v|					OOPEnum class compile: ('compilation_helper: aSourceCode ',String cr,'     ' ,self name ,'_',v asString,'__ class compile: aSourceCode notifying:nil.') notifying: nil.					OOPEnum compilation_helper: aSourceCode.				].			]		]	] ifFalse:[		AssertionFailure signal: (methodName, ' does not override a method from ', (super class name)).	].! !!OOPEnum class methodsFor: 'setter' stamp: 'new 5/30/2023 15:15'!values: arrVals	values := (arrVals veryDeepCopy).! !!OOPEnum class methodsFor: 'getter' stamp: 'new 5/30/2023 15:16'!values	^values! !!OOPEnum class methodsFor: 'switchCase' stamp: 'new 5/30/2023 16:13'!addSwitch | func subsets values_size tmp_vals |	subsets := LinkedList new.	(self isKindOf: OOPEnum class) ifTrue:[		(self isMemberOf: OOPEnum class) ifTrue:[			AssertionFailure signal:('can''t add switch functionality to non-Enum class ', self name).		]		ifFalse:[				(nil = values) ifTrue:[AssertionFailure signal:('No values to add to switch case of: ', self name)].			values_size := values size.			(2 to: values_size) do:[:i |				tmp_vals := values 				combinations: i atATimeDo: [:i_combination |						subsets add: i_combination deepCopy.].			].			values do:[:x| |tmp|				tmp := Array new:1. 				tmp at:1 put:x.				subsets add:tmp.				]. "create combination of only one"							subsets	 do:[:set | | counter body|				body := '    '.				func := 'switch_'.				counter := 1.				set do: [:element |					(counter ~= (set size)) ifTrue: [func := (func,'case_', element, ': ', element,'Block ')]					ifFalse:[func := (func,'case_', element, ': ', element,'Block')].					counter := counter +1.					"(self class = (OOPColor_RED__))"					body := (body,'(self class = (',self name,'_',element,'__)) ifTrue:[^(',element,'Block value)].', String cr,'    ').				].				((set size) ~= (values size)) ifTrue:[					func := (func, ' default: defaultBlock').					body := (body, '(defaultBlock value).').				].				self compile: (func,(String cr),body) notifying: nil.			]	]	] ifFalse:[		AssertionFailure signal:('can''t add switch functionality to non-Enum class ', self name).	]	! !!OOPEnum class methodsFor: 'as yet unclassified' stamp: 'new 5/30/2023 18:57'!compilation_helper: aSourceCode      OOPColor_GREEN__ class compile: aSourceCode notifying:nil.! !